apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    google()
    mavenCentral()
}

kapt {
    mapDiagnosticLocations = true
    useBuildCache = true
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion
    testOptions.unitTests.includeAndroidResources = true

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    namespace 'com.motorro.appupdatewrapper'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    api 'androidx.core:core-ktx:1.10.1'
    api 'androidx.lifecycle:lifecycle-common:2.6.1'
    api 'com.google.android.play:core:1.10.3'

    implementation 'com.jakewharton.timber:timber:5.0.1'

    testImplementation project(":testapp")
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.robolectric:robolectric:4.8.1'
    testImplementation 'androidx.lifecycle:lifecycle-runtime-testing:2.6.1'
}

dokkaJavadoc.configure {
    outputDirectory.set(new File("$buildDir/javadoc"))
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
    }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.source
}

artifacts {
    archives sourcesJar, javadocJar
}

def libId = 'appupdatewrapper'
def libName = 'appupdatewrapper'
def libDesc = 'A wrapper for Android `AppUpdateManager` to encapsulate update workflow.'

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                artifact sourcesJar
                artifact javadocJar
                groupId = rootProject.group
                artifactId = libId
                version = rootProject.version

                pom {
                    name = libName
                    description = libDesc
                    url = projectUrl
                    licenses {
                        license {
                            name = 'Apache-2.0'
                            url = 'https://apache.org/licenses/LICENSE-2.0'
                        }
                    }
                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }
                    scm {
                        connection = projectScm
                        developerConnection = projectScm
                        url = projectUrl
                    }
                }
            }
        }
        repositories {
            maven {
                name = "sonatype"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    signing {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}
